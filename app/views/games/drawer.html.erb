<h1 class="header1">You need to draw: <%= @game.thing.name %> </h1>

<canvas id="can"  style="border:2px solid;"></canvas>

<div>Choose Color</div>
<div class='picker' style= "background:green;" id="green" onclick="setcolor(this)"></div>
<div class='picker' style="background:blue;" id="blue" onclick="setcolor(this)"></div>
<div class='picker' style="background:red;" id="red" onclick="setcolor(this)"></div>
<div class='picker' style="background:yellow;" id="yellow" onclick="setcolor(this)"></div>
<div class='picker' style="background:orange;" id="orange" onclick="setcolor(this)"></div>
<div class='picker' style="background:black;" id="black" onclick="setcolor(this)"></div>
<div class='picker' style="background:#eaebed;border:2px solid;" id="white" onclick="setcolor(this)"></div>


<div>Choose size</div>
<div class='picker' id='2' onclick="setthickness(this)">2</div>
<div class='picker start_picker' id='5' onclick="setthickness(this)">5</div>
<div class='picker'id='10' onclick="setthickness(this)">10</div>
<div class='picker last'id='20' onclick="setthickness(this)">20</div>


<input type="button" value="clear" id="clr" size="23" onclick="erase()" >

<script type="text/javascript">
    
    // Set up the canvas
    var canvas = document.getElementById("can");
    var ctx = canvas.getContext("2d");
    var color = "black",
    thickness = 5;
    ctx.strokeStyle = "#222222";
    ctx.lineWith = 2;
    canvas.width = window.innerWidth * .9;
    canvas.height = window.innerHeight * .7;        
    w = canvas.width;
    h = canvas.height;

    // Set up mouse events for drawing
    var drawing = false;
    var mousePos = { x:0, y:0 };
    var lastPos = mousePos;
    canvas.addEventListener("mousedown", function (e) {
            drawing = true;
      lastPos = getMousePos(canvas, e);
    }, false);
    canvas.addEventListener("mouseup", function (e) {
      drawing = false;
    }, false);
    canvas.addEventListener("mousemove", function (e) {
      mousePos = getMousePos(canvas, e);
    }, false);

    // Get the position of the mouse relative to the canvas
    function getMousePos(canvasDom, mouseEvent) {
      var rect = canvasDom.getBoundingClientRect();
      return {
        x: mouseEvent.clientX - rect.left,
        y: mouseEvent.clientY - rect.top
      };
    }

    // Get a regular interval for drawing to the screen
    window.requestAnimFrame = (function (callback) {
            return window.requestAnimationFrame || 
               window.webkitRequestAnimationFrame ||
               window.mozRequestAnimationFrame ||
               window.oRequestAnimationFrame ||
               window.msRequestAnimaitonFrame ||
               function (callback) {
            window.setTimeout(callback, 1000/60);
               };
    })();

    // Draw to the canvas
    function renderCanvas() {
      if (drawing) {
        ctx.beginPath();
        ctx.moveTo(lastPos.x, lastPos.y);
        ctx.lineTo(mousePos.x, mousePos.y);
        ctx.strokeStyle = color;
        ctx.lineWidth = thickness;
        ctx.stroke();
        ctx.closePath();
        lastPos = mousePos;
      }
    }

    // Allow for animation
    (function drawLoop () {
      requestAnimFrame(drawLoop);
      renderCanvas();
    })();

    // Set up touch events for mobile, etc
    canvas.addEventListener("touchstart", function (e) {
        e.preventDefault();
            mousePos = getTouchPos(canvas, e);
      var touch = e.touches[0];
      var mouseEvent = new MouseEvent("mousedown", {
        clientX: touch.clientX,
        clientY: touch.clientY
      });
      canvas.dispatchEvent(mouseEvent);
    }, false);
    canvas.addEventListener("touchend", function (e) {
        e.preventDefault();
      var mouseEvent = new MouseEvent("mouseup", {});
      canvas.dispatchEvent(mouseEvent);
    }, false);
    canvas.addEventListener("touchmove", function (e) {
        e.preventDefault();
      var touch = e.touches[0];
      var mouseEvent = new MouseEvent("mousemove", {
        clientX: touch.clientX,
        clientY: touch.clientY
      });
      canvas.dispatchEvent(mouseEvent);
    }, false);

    // Get the position of a touch relative to the canvas
    function getTouchPos(canvasDom, touchEvent) {
      var rect = canvasDom.getBoundingClientRect();
      return {
        x: touchEvent.touches[0].clientX - rect.left,
        y: touchEvent.touches[0].clientY - rect.top
      };
    }

    // Prevent scrolling when touching the canvas
    document.body.addEventListener("touchstart", function (e) {
      if (e.target == canvas) {
        e.preventDefault();
      }
    }, false);
    document.body.addEventListener("touchend", function (e) {
      if (e.target == canvas) {
        e.preventDefault();
      }
    }, false);
    document.body.addEventListener("touchmove", function (e) {
      if (e.target == canvas) {
        e.preventDefault();
      }
    }, false);


        function setcolor(obj) {
        switch (obj.id) {
            case "green":
                color = "green";
                break;
            case "blue":
                color = "blue";
                break;
            case "red":
                color = "red";
                break;
            case "yellow":
                color = "yellow";
                break;
            case "orange":
                color = "orange";
                break;
            case "black":
                color = "black";
                break;
            case "white":
                color = "#eaebed";
                break;
        }
    }

    function setthickness(obj) {
        switch (obj.id) {
            case "2":
                $("#2").css("border-color", "red");
                $("#5").css("border-color", "black");
                $("#10").css("border-color", "black");
                $("#20").css("border-color", "black");
                thickness = 2;
                break;
            case "5":
                $("#5").css("border-color", "red");
                $("#2").css("border-color", "black");
                $("#10").css("border-color", "black");
                $("#20").css("border-color", "black");
                thickness = 5;
                break;
            case "10":
                $("#10").css("border-color", "red");
                $("#5").css("border-color", "black");
                $("#2").css("border-color", "black");
                $("#20").css("border-color", "black");
                thickness = 10;
                break;
            case "20":
                $("#20").css("border-color", "red");
                $("#5").css("border-color", "black");
                $("#10").css("border-color", "black");
                $("#2").css("border-color", "black");
                thickness = 20;
                break;
        }
    }

    function erase() {
        var m = confirm("Want to clear");
        if (m) {
            ctx.clearRect(0, 0, w, h);
            document.getElementById("canvasimg").style.display = "none";
        }
    }    

    function save() {
        var dataURL = canvas.toDataURL();
        $('#update_btn').attr('url',dataURL);
            $.ajax({
              type: "POST",
              url: "/user/update_op_url",
              dataType:"json",
              data: {url:dataURL },
              success:function(data) {
                
                return false;
              },
              error:function(data) {
                
                return false;
              }
            });
    }

    function check() {
            $.ajax({
              type: "POST",
              url: "/check",
              dataType:"json",
              data: {},
              success:function(data) {
                return false;
              },
              error:function(data) {
                if (data.responseText == 'completed') {
                    window.location ="/games/"+gon.id+"/review";
                }else if (data.responseText == 'guesser') {
                    window.location ="/games/"+gon.gameid;
                };              
                return false;
              }
            });
    }  

    function checkDrawer() {
            $.ajax({
              type: "POST",
              url: "/checkdrawer",
              dataType:"json",
              data: {},
              success:function(data) {
                return false;
              },
              error:function(data) {
                console.log(data.responseText)
                if (data.responseText == 'guesser') {
                    window.location ="/games/"+gon.gameid;
                };              
                return false;
              }
            });
    }      
    
    setInterval(function(){ check(); }, 1000);

    setInterval(function(){ save(); }, 500);       
</script>
